// –ò–º–ø–æ—Ä—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
require('dotenv').config();
const { Pool } = require('pg');
const axios = require('axios');
const _ = require('lodash');
const express = require('express');
const cors = require('cors');
const schedule = require('node-schedule');
const app = express();
const TIME_API_KEY = process.env.YANDEX_TIME_API_KEY;
const MAIN_API_KEY = process.env.YANDEX_API_KEY;

app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
const SPORT_CATEGORIES = {
  /*swimming: {
      searchTerms: [
      '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±–∞—Å—Å–µ–π–Ω –º–æ—Å–∫–≤–∞',
      '–±–∞—Å—Å–µ–π–Ω —Ñ–∏—Ç–Ω–µ—Å —Ü–µ–Ω—Ç—Ä',
      '—à–∫–æ–ª–∞ –ø–ª–∞–≤–∞–Ω–∏—è',
      '–≤–æ–¥–Ω–æ—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å',
      '—Ü–µ–Ω—Ç—Ä –ø–ª–∞–≤–∞–Ω–∏—è',
      '–æ–ª–∏–º–ø–∏–π—Å–∫–∏–π –±–∞—Å—Å–µ–π–Ω',
      '–ø–ª–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
      '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±–∞—Å—Å–µ–π–Ω',
      '—Ü–µ–Ω—Ç—Ä –ø–ª–∞–≤–∞–Ω–∏—è',
      '—Ñ–∏—Ç–Ω–µ—Å –±–∞—Å—Å–µ–π–Ω',
      '—à–∫–æ–ª–∞ –ø–ª–∞–≤–∞–Ω–∏—è',
      '–≤–æ–¥–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å',
      '–ø–ª–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
      '–±–∞—Å—Å–µ–π–Ω —Å –¥–æ—Ä–æ–∂–∫–∞–º–∏',
      '–æ—Ç–∫—Ä—ã—Ç—ã–π –±–∞—Å—Å–µ–π–Ω',
      '–±–∞—Å—Å–µ–π–Ω –æ–ª–∏–º–ø–∏–π—Å–∫–∏–π',
      '–±–∞—Å—Å–µ–π–Ω —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º'
      ],
    subcategories: ['swimming', 'water_polo', 'synchronized_swimming', 'aqua_aerobics', 'diving'],
    emoji: 'üèä',
    qualityFilters: {
      required: ['–±–∞—Å—Å–µ–π–Ω –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è', '–≤–æ–¥–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å', '—à–∫–æ–ª–∞ –ø–ª–∞–≤–∞–Ω–∏—è', '–ø–ª–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π', '–±–∞—Å—Å–µ–π–Ω', '–î–∞–π–≤–∏–Ω–≥', '–±–∞—Å—Å–µ–π–Ω', '–ø–ª–∞–≤–∞–Ω', '–≤–æ–¥–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å', '—Ü–µ–Ω—Ç—Ä', '—à–∫–æ–ª–∞', '—Å–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å', '–æ–ª–∏–º–ø–∏–π—Å–∫–∏–π'],
      recommended: ['–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω', '—Ä–∞–∑–¥–µ–≤–∞–ª–∫–∞', '–ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —à–∫–æ–ª–∞', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±, —Å–µ–∫—Ü–∏—è', '–®–∫–æ–ª–∞ –ø–ª–∞–≤–∞–Ω–∏—è', '–§–∏—Ç–Ω–µ—Å-–∫–ª—É–±', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–¥–≤–æ–¥–Ω–æ–≥–æ –ø–ª–∞–≤–∞–Ω–∏—è', '–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ', '–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ'],
      minRating: 3.6
    },
    examples: ['–ë—É—Ä–µ–≤–µ—Å—Ç–Ω–∏–∫ –ú–æ—Å–∫–≤–∞', '–ß–∞–π–∫–∞ –ú–æ—Å–∫–≤–∞', '–ê–∫–≤–∞—Ç–æ—Ä–∏—è –ó–∏–ª', '–§–û–ö –°–µ–≤–µ—Ä–Ω–æ–µ –¢—É—à–∏–Ω–æ', '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Å–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å –û–ª–∏–º–ø–∏–π—Å–∫–∏–π']
  },*/
  paddle_sports: {
    searchTerms: [
      '–∫–∞—è–∫–∏–Ω–≥',
      '—Å–∞–ø—Å–µ—Ä—Ñ–∏–Ω–≥',
      '–≥—Ä–µ–±–ª—è –Ω–∞ –∫–∞–Ω–æ—ç',
      '—Ä–∞—Ñ—Ç –∫–ª—É–±',
      '–≥—Ä–µ–±–ª—è –Ω–∞ –±–∞–π–¥–∞—Ä–æ–∫',
      '—Å–∞–ø-–∫–ª—É–±',
      '–ø—Ä–æ–∫–∞—Ç —Å–∞–ø–æ–≤',
      '—Å—Ç–∞–Ω—Ü–∏—è —Å–∞–ø —Å–µ—Ä—Ñ–∏–Ω–≥–∞',
      '–≥—Ä–µ–±–Ω–∞—è –±–∞–∑–∞',
      '–±–∞–π–¥–∞—Ä–æ—á–Ω—ã–π –∫–ª—É–±',
      '—Ä–∞—Ñ—Ç–∏–Ω–≥ –∫–ª—É–±',
      '—Å–∞–ø –ø—Ä–æ–∫–∞—Ç',
      '–º–∞—Ä—à—Ä—É—Ç –Ω–∞ –±–∞–π–¥–∞—Ä–∫–µ',
      '—à–∫–æ–ª–∞ —Å–∞–ø —Å–µ—Ä—Ñ–∏–Ω–≥–∞',
      '–≥—Ä–µ–±–Ω–æ–π —Ü–µ–Ω—Ç—Ä',
      '—Å–ø–ª–∞–≤ –Ω–∞ –±–∞–π–¥–∞—Ä–∫–∞—Ö', 
      '–∫–∞—è–∫ —Ç—É—Ä', 
      '–º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–∞–ø–±–æ—Ä–¥–∞',
      '–∫–∞—è–∫ –∫–µ–º–ø–∏–Ω–≥', 
      '–∞—Ä–µ–Ω–¥–∞ –∫–∞—è–∫–æ–≤', 
      '—Ç—É—Ä—ã –Ω–∞ –±–∞–π–¥–∞—Ä–∫–∞—Ö',
      '—Å–ø–ª–∞–≤ –ø–æ —Ä–µ–∫–∞–º', 
      '–∫–∞—è–∫ —Å—Ç–∞–Ω—Ü–∏—è', 
      '—Å–∞–ø —ç–∫—Å–∫—É—Ä—Å–∏–∏',
      '–≥—Ä–µ–±–Ω–æ–π —Å–ø–æ—Ä—Ç', 
      '–ø–æ—Ö–æ–¥—ã –Ω–∞ –∫–∞—è–∫–∞—Ö', 
      '–∫–∞—è–∫ –ø–∞—Ä–∫',
      '–≤–æ–¥–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã', 
      '–∫–∞—è–∫ –ø—Ä–æ–∫–∞—Ç —É –≤–æ–¥—ã', 
      '—Å–∞–ø –ø–æ—Ö–æ–¥—ã',
      '–ø–æ–∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ —Å–∞–ø–µ',
      '—Ç—É—Ä—ã –Ω–∞ —Å–∞–ø–±–æ—Ä–¥–∞—Ö',
      '–≤–æ–¥–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ —Å–∞–ø–∞—Ö',
      '–∞—Ä–µ–Ω–¥–∞ —Å–∞–ø–±–æ—Ä–¥–∞ —Å –≤–µ—Å–ª–æ–º',
      '–æ–±—É—á–µ–Ω–∏–µ —Å–∞–ø—Å–µ—Ä—Ñ–∏–Ω–≥—É',
      '—Å–∞–ø —Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º',
      '—Å–∞–ø —Ç—É—Ä –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ',
      '—Å–∞–ø —Ü–µ–Ω—Ç—Ä',
      '—Å–∞–ø –º–∞—Ä—à—Ä—É—Ç—ã —É –≤–æ–¥—ã',
      '–∫–ª—É–± –ø–æ —Å–∞–ø—Å–µ—Ä—Ñ–∏–Ω–≥—É',
      '—Å–ø–ª–∞–≤—ã –Ω–∞ –≤–æ–¥–µ',
      '–±–∞–π–¥–∞—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
      '—Ç—É—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è –Ω–∞ —Å–∞–ø–µ',
      '—à–∫–æ–ª–∞ –≥—Ä–µ–±–ª–∏ –Ω–∞ –∫–∞—è–∫–∞—Ö',
      '–∞—Ä–µ–Ω–¥–∞ –≤–æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
      '–ø–æ—Ö–æ–¥ —Å –±–∞–π–¥–∞—Ä–∫–∞–º–∏',
      '–≥—Ä–µ–±–Ω–æ–π –∫–ª—É–± —É —Ä–µ–∫–∏',
      '–≥–∏–¥—Ä–æ—Å–∞–ø —Å—Ç–∞–Ω—Ü–∏—è',
      '—Ä–µ–∫–∞ –¥–ª—è —Å–∞–ø –ø—Ä–æ–≥—É–ª–æ–∫',
      '—É—á–µ–±–Ω—ã–π —Ç—É—Ä –Ω–∞ –±–∞–π–¥–∞—Ä–∫–µ',
      '–≤–æ–¥–Ω—ã–µ —Ç—É—Ä—ã –Ω–∞ –∫–∞—è–∫–∞—Ö',
      '–≤–æ–¥–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Å–∞–ø',
      '—Å–∞–ø —Å –≤–∏–¥–∞–º–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É',
      '–≤–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å –±–∞–π–¥–∞—Ä–∫–∞–º–∏',
      '—à–∫–æ–ª–∞ –≤–æ–¥–Ω–æ–π –≥—Ä–µ–±–ª–∏',
      '—Å–∞–ø –ª–∞–≥–µ—Ä—å',
      '–≤–æ–¥–Ω—ã–π –ø–æ—Ö–æ–¥ –ø–æ —Ä–µ–∫–µ',
      '—Å–∞–ø —Å–ø–ª–∞–≤ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
      '–±–∞–π–¥–∞—Ä–∫–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
      '—Å–∞–ø –¥–æ—Å–∫–∞ –Ω–∞ –ø—Ä–æ–∫–∞—Ç',
      '–≤–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
      '—Ç—É—Ä –Ω–∞ —Å–∞–ø–∞—Ö —Å –Ω–æ—á—ë–≤–∫–æ–π',
      '–ø–æ—Ö–æ–¥ –Ω–∞ –∫–∞—è–∫–∞—Ö —Å –ø–∞–ª–∞—Ç–∫–∞–º–∏',
      '—ç–∫—Å–∫—É—Ä—Å–∏—è –Ω–∞ –±–∞–π–¥–∞—Ä–∫–∞—Ö —Å –≥–∏–¥–æ–º',
      '—Å–ø–ª–∞–≤ –ø–æ –ø—Ä–∏—Ä–æ–¥–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º',
      '–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –Ω–∞ –≤–æ–¥–µ',
      '–≤–æ–¥–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
      '—Å–∞–ø-–∫–µ–º–ø–∏–Ω–≥ —Å –Ω–æ—á—ë–≤–∫–æ–π'
    ],
    subcategories: ['kayaking', 'sup', 'canoe', 'rowing', 'rafting'],
    emoji: 'üõ∂',
    qualityFilters: {
      required: ['–∫–∞—è–∫', '—Å–∞–ø—Å–µ—Ä—Ñ–∏–Ω–≥', '—Ä–∞—Ñ—Ç', '–±–∞–π–¥–∞—Ä–∫–∞', '–ø–∞–¥–¥–ª', '—Å—Ç–∞–Ω—Ü–∏—è', '–ø—Ä–æ–∫–∞—Ç', '–ø—Ä–æ–∫–∞—Ç –∫–∞—è–∫–æ–≤', '—Å–∞–ø-–±–æ—Ä–¥', '—Å–∞–ø-–¥–æ—Å–∫–∏', '—Å–∞–ø –±–æ—Ä–¥', '—Å–∞–ø –¥–æ—Å–∫–∏', '–≤–æ–¥–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏', '—Ä–∞—Ñ—Ç–∏–≥–Ω–≥', '–ª–æ–¥–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è', '–≤–æ–¥–Ω–∞—è –±–∞–∑–∞', '–ì—Ä–µ–±–Ω–∞—è –±–∞–∑–∞', '–¶–µ–Ω—Ç—Ä –≥—Ä–µ–±–ª–∏ –Ω–∞ –±–∞–π–¥–∞—Ä–∫–∞—Ö –∏ –∫–∞–Ω–æ—ç', '–¶–µ–Ω—Ç—Ä –≥—Ä–µ–±–ª–∏ –Ω–∞ –±–∞–π–¥–∞—Ä–∫–∞—Ö', '–¶–µ–Ω—Ç—Ä –≥—Ä–µ–±–ª–∏ –Ω–∞ –∫–∞–Ω–æ—ç', '–ë–∞–∑–∞ –ì—Ä–µ–±–ª–∏', '–≤–æ–¥–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏', '—Ä–∞—Ñ—Ç–∏–Ω–≥' ],
      recommended: ['–º–∞—Ä—à—Ä—É—Ç', '–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '—Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', '–∞—Ä–µ–Ω–¥–∞', '–ü—É–Ω–∫—Ç –ø—Ä–æ–∫–∞—Ç–∞', '–∫–≤–∞–¥—Ä–æ–º–∞—Ä—à—Ä—É—Ç—ã', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞'],
    },
    examples: ['–ë—É–≥–∞–∑—Å–∫–∞—è –∫–æ—Å–∞', '–†–µ–∫–∞ –ë–µ–ª–∞—è', '–õ–∞–¥–æ–∂—Å–∫–∏–µ —à—Ö–µ—Ä—ã']
  },
  sailing: {
    searchTerms: [
      '–ø–∞—Ä—É—Å–Ω—ã–π —Å–ø–æ—Ä—Ç', 
      '–≤–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥',
      '–∫–∞–π—Ç—Å–µ—Ä—Ñ–∏–Ω–≥',
      '—è—Ö—Ç–∏–Ω–≥',
      '—è—Ö—Ç –∫–ª—É–±',
      '–ø–∞—Ä—É—Å–Ω—ã–π –∫–ª—É–±',
      '–≤–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥ —à–∫–æ–ª–∞',
      '–º–∞—Ä–∏–Ω–∞ –¥–ª—è —è—Ö—Ç',
      '–ø–∞—Ä—É—Å–Ω–∞—è —à–∫–æ–ª–∞',
      '–∫–ª—É–± –∫–∞–π—Ç—Å–µ—Ä—Ñ–∏–Ω–≥–∞',
      '–ø—Ä–∏—á–∞–ª –ø–∞—Ä—É—Å–Ω—ã—Ö —è—Ö—Ç',
      '—è—Ö—Ç–µ–Ω–Ω–∞—è —Å—Ç–æ—è–Ω–∫–∞',
      '—è—Ö—Ç–µ–Ω–Ω–∞—è —à–∫–æ–ª–∞',
      '–≤–∏–Ω–¥—Å–µ—Ä—Ñ —Å—Ç–∞–Ω—Ü–∏—è',
      '–∞—Ä–µ–Ω–¥–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–∞', 
      '–æ–±—É—á–µ–Ω–∏–µ —è—Ö—Ç–∏–Ω–≥—É', 
      '–ø–∞—Ä—É—Å–Ω—ã–µ –≥–æ–Ω–∫–∏',
      '–∫—Ä—É–∏–∑—ã –Ω–∞ —è—Ö—Ç–µ', 
      '—à–∫–æ–ª–∞ –≤–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥–∞', 
      '–∫–∞–π—Ç —Å—Ç–∞–Ω—Ü–∏—è',
      '—è—Ö—Ç–µ–Ω–Ω–∞—è –±–∞–∑–∞', 
      '–ø—Ä–∏—Å—Ç–∞–Ω—å –¥–ª—è —è—Ö—Ç', 
      '–ø–∞—Ä—É—Å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏',
      '–º–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ–¥ –ø–∞—Ä—É—Å–æ–º', 
      '–∞—Ä–µ–Ω–¥–∞ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–∞',
      '—Ä–µ–π—Å—ã –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ', 
      '–±—É—Ö—Ç—ã –¥–ª—è —è—Ö—Ç–∏–Ω–≥–∞', 
      '–º–∞—Ä–∏–Ω—ã —á–µ—Ä–Ω–æ–º–æ—Ä—å—è',
      '—è—Ö—Ç–∏–Ω–≥ —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º',
      '–º–æ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–º–∞—Ä–∞–Ω–µ',
      '—è—Ö—Ç —à–∫–æ–ª–∞ –Ω–∞ –±–µ—Ä–µ–≥—É',
      '—à–∫–æ–ª–∞ –ø–∞—Ä—É—Å–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–π',
      '–ø–∞—Ä—É—Å–Ω–∞—è —à–∫–æ–ª–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
      '—è—Ö—Ç–∞ –Ω–∞ –ø—Ä–æ–∫–∞—Ç —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º',
      '–æ–±—É—á–µ–Ω–∏–µ –≤ —è—Ö—Ç–µ–Ω–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ',
      '–ø–∞—Ä—É—Å–Ω—ã–π —Ç—É—Ä–∏–∑–º –Ω–∞ —é–≥–µ',
      '—è—Ö—Ç-–∫—Ä—É–∏–∑—ã –ø–æ —á–µ—Ä–Ω–æ–º—É –º–æ—Ä—é',
      '—è—Ö—Ç–∏–Ω–≥ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
      '–≤–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥ –Ω–∞ –º–æ—Ä–µ',
      '–æ–±—É—á–µ–Ω–∏–µ –ø–∞—Ä—É—Å–Ω–æ–º—É —Å–ø–æ—Ä—Ç—É',
      '–º–æ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ–¥ –ø–∞—Ä—É—Å–æ–º',
      '–≤–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥ –ø—Ä–æ–∫–∞—Ç',
      '–∫–∞—Ç–∞–º–∞—Ä–∞–Ω –∞—Ä–µ–Ω–¥–∞',
      '—è—Ö—Ç–∞ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞',
      '—è—Ö—Ç —ç–∫—Å–∫—É—Ä—Å–∏–∏',
      '—è—Ö—Ç —Ç—É—Ä —Å –Ω–æ—á–µ–≤–∫–æ–π',
      '—è—Ö—Ç–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞',
      '—Ü–µ–Ω—Ç—Ä –ø–∞—Ä—É—Å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è',
      '—è—Ö—Ç —à–∫–æ–ª–∞ –≤ –°–æ—á–∏',
      '—è—Ö—Ç–µ–Ω–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ',
      '—à–∫–æ–ª–∞ –º–æ—Ä–µ–ø–ª–∞–≤–∞–Ω–∏—è',
      '–∫–ª—É–± –≤–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥–∞',
      '–∞—Ä–µ–Ω–¥–∞ –ª–æ–¥–æ–∫ –ø–æ–¥ –ø–∞—Ä—É—Å–æ–º',
      '–≤–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥ —É—Ä–æ–∫–∏',
      '—è—Ö—Ç–∞ –Ω–∞ –¥–µ–Ω—å',
      '–ø–∞—Ä—É—Å–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ —Å —Ñ–æ—Ç–æ',
      '—è—Ö—Ç —à–∫–æ–ª–∞ –Ω–∞ –æ–∑–µ—Ä–µ',
      '—è—Ö—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏',
      '—è—Ö—Ç–∞ –≤ –∞—Ä–µ–Ω–¥—É —Å —à–∫–∏–ø–µ—Ä–æ–º',
      '—è—Ö—Ç–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ',
      '–æ–±—É—á–µ–Ω–∏–µ –ø–∞—Ä—É—Å–Ω–æ–º—É —Å–ø–æ—Ä—Ç—É –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö',
      '—è—Ö—Ç–∏–Ω–≥ –ø–æ —á–µ—Ä–Ω–æ–º–æ—Ä—Å–∫–æ–º—É –ø–æ–±–µ—Ä–µ–∂—å—é',
      '–º–æ—Ä–µ –∏ –ø–∞—Ä—É—Å–∞ —Ç—É—Ä',
      '—è—Ö—Ç–∏–Ω–≥ —Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ–º',
      '–ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ–¥ –ø–∞—Ä—É—Å–æ–º —Å —Ñ–æ—Ç–æ',
      '—è—Ö—Ç–∏–Ω–≥ –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–æ—Ä—Ç—É'
    ],
    subcategories: ['sailing', 'windsurfing', 'kitesurfing', 'yachting'],
    emoji: '‚õµ',
    qualityFilters: {
      required: ['—è—Ö—Ç', '–º–∞—Ä–∏–Ω–∞', '–ø–∞—Ä—É—Å', '–≤–∏–Ω–¥—Å–µ—Ä—Ñ', '–∫–∞–π—Ç', '–≤–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥', '–∫–∞–π—Ç—Å–µ—Ä—Ñ–∏–Ω–≥', '–ö–∞–π—Ç —Å—Ç–∞–Ω—Ü–∏—è', '–∫–∞–π—Ç —Å—Ç–∞–Ω—Ü–∏—è', '–≤–∏–Ω–¥ —Å—Ç–∞–Ω—Ü–∏—è', '–í–∏–Ω–¥ —Å—Ç–∞–Ω—Ü–∏—è', '–Ø—Ö—Ç-–∫–ª—É–±', '—è—Ö—Ç-–∫–ª—É–±', '–∞—Ä–µ–Ω–¥–∞ –∫–∞—Ç–µ—Ä–æ–≤', '–∞—Ä–µ–Ω–¥–∞ –ª–æ–¥–æ–∫', '–∞—Ä–µ–Ω–¥–∞ —è—Ö—Ç', '–ê—Ä–µ–Ω–¥–∞ –ø–∞—Ä—É—Å–Ω–æ–π —è—Ö—Ç—ã'],
      recommended: ['–∞—Ä–µ–Ω–¥–∞', '–æ–±—É—á–µ–Ω–∏–µ', '–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '—Å–ø–æ—Ä—Ç–∏–∏–∞–≤–Ω—è –±–∞–∑–∞', '–≤–æ–¥–Ω–∞—è –±–∞–∑–∞', '–ª–æ–¥–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è'],
    },
    examples: ['–ú–∞—Ä–∏–Ω–∞ –°–æ—á–∏', '–ë—É—Ö—Ç–∞ –ü–µ—Å—á–∞–Ω–∞—è', '–û–Ω–µ–∂—Å–∫–æ–µ –æ–∑–µ—Ä–æ']
  },
  motor_sports: {
    searchTerms: [
      '–≤–æ–¥–Ω—ã–µ –ª—ã–∂–∏',
      '–≤–µ–π–∫–±–æ—Ä–¥–∏–Ω–≥',
      '–∞–∫–≤–∞–±–∞–π–∫',
      '–ø–∞—Ä–∞—Å–µ–π–ª–∏–Ω–≥',
      '–≤–µ–π–∫ –ø–∞—Ä–∫',
      '–ø—Ä–æ–∫–∞—Ç –∞–∫–≤–∞–±–∞–π–∫–æ–≤',
      '—Å—Ç–∞–Ω—Ü–∏—è –≤–æ–¥–Ω—ã—Ö –ª—ã–∂',
      '–≤–æ–¥–Ω–æ-–º–æ—Ç–æ—Ä–Ω—ã–π –∫–ª—É–±',
      '–≤–µ–π–∫–±–æ—Ä–¥ —Å—Ç–∞–Ω—Ü–∏—è',
      '–ø—Ä–æ–∫–∞—Ç –∫–∞—Ç–µ—Ä–æ–≤',
      '—Ç—Ä–∞—Å—Å–∞ –¥–ª—è –≤–µ–π–∫–∞',
      '–∞–∫–≤–∞–±–∞–π–∫ –∫–ª—É–±',
      '–∫–ª—É–± –≤–æ–¥–Ω—ã—Ö –ª—ã–∂',
      '–º–æ—Ç–æ–±–æ—Ç —Ü–µ–Ω—Ç—Ä',
      '–≤–µ–π–∫ –ø–∞—Ä–∫ –Ω–∞ –≤–æ–¥–µ', 
      '–∫–∞—Ç–∞–Ω–∏–µ –Ω–∞ –≥–∏–¥—Ä–æ—Ü–∏–∫–ª–∞—Ö', 
      '–∞—Ä–µ–Ω–¥–∞ –≤–µ–π–∫–±–æ—Ä–¥–∞',
      '–≤–æ–¥–Ω–æ-–º–æ—Ç–æ—Ä–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞', 
      '–¥—Ä–∏—Ñ—Ç –Ω–∞ –≥–∏–¥—Ä–æ—Ü–∏–∫–ª–∞—Ö',
      '–∞–∫–≤–∞–±–∞–π–∫ –ø—Ä–æ–∫–∞—Ç', 
      '–≤–æ–¥–Ω—ã–µ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã', 
      '–±—É–∫—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–æ–¥–µ',
      '—Ñ–ª–∞–π–±–æ—Ä–¥ –∫–ª—É–±', 
      '–≤–æ–¥–Ω—ã–µ —Å–∫—É—Ç–µ—Ä—ã', 
      '–º–æ—Ç–æ—Å–µ—Ä—Ñ–∏–Ω–≥',
      '–∞–∫–≤–∞—Å–∫–∏–ø–µ—Ä', 
      '–≤–æ–¥–Ω—ã–µ –º–æ—Ç–æ—Ü–∏–∫–ª—ã', 
      '—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–æ–¥–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
      '–≥–∏–¥—Ä–æ—Ü–∏–∫–ª –Ω–∞–ø—Ä–æ–∫–∞—Ç',
      '–ø–æ–∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –∞–∫–≤–∞–±–∞–π–∫–µ',
      '—Å—Ç–∞–Ω—Ü–∏—è –≤–µ–π–∫–±–æ—Ä–¥–∏–Ω–≥–∞',
      '–∞—Ä–µ–Ω–¥–∞ —Ñ–ª–∞–π–±–æ—Ä–¥–∞ –∏ –≥–∏–¥—Ä–æ—Ü–∏–∫–ª–∞',
      '–≤–æ–¥–Ω—ã–µ –ª—ã–∂–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º',
      '–ø—Ä–æ–∫–∞—Ç –≤–æ–¥–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
      '—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–æ–¥–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
      '–∞—Ä–µ–Ω–¥–∞ –ª–æ–¥–æ–∫ –∏ –∫–∞—Ç–µ—Ä–æ–≤',
      '–ø—Ä–æ–∫–∞—Ç –∫–∞—Ç–µ—Ä–∞ —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º',
      '—Å—Ç–∞–Ω—Ü–∏—è —Ñ–ª–∞–π–±–æ—Ä–¥–∞',
      '–∫–∞—Ç–∞–Ω–∏–µ –∑–∞ –∫–∞—Ç–µ—Ä–æ–º',
      '–∞–∫–≤–∞–±–∞–π–∫ –Ω–∞ –º–æ—Ä–µ',
      '–∫–∞—Ç–∞–Ω–∏–µ –ø–æ –≤–æ–ª–Ω–∞–º',
      '—Ñ–ª–∞–π–±–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–∫–∞—Ç',
      '—Å—Ç–∞–Ω—Ü–∏—è –≤–æ–¥–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞',
      '—à–∫–æ–ª–∞ –≤–µ–π–∫—Å–µ—Ä—Ñ–∏–Ω–≥–∞',
      '–∞—Ä–µ–Ω–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ –∫–∞—Ç–µ—Ä–∞',
      '–ø–æ–∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ —Å–∫—É—Ç–µ—Ä–µ –ø–æ –≤–æ–¥–µ',
      '–ø—Ä–æ–∫–∞—Ç –≤–µ–π–∫–±–æ—Ä–¥–∞ —Å —Ç—Ä–∞—Å—Å–æ–π',
      '–º–æ—Ç–æ—Å–µ—Ä—Ñ–∏–Ω–≥ –Ω–∞ –≤–æ–ª–Ω–∞—Ö',
      '–∫–∞—Ç–∞–Ω–∏–µ –Ω–∞ —Ñ–ª–∞–π–±–æ—Ä–¥–µ',
      '–∫–∞—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫',
      '–∞—Ä–µ–Ω–¥–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
      '—Å—Ç–∞–Ω—Ü–∏—è –º–æ—Ç–æ—Å–µ—Ä—Ñ–∏–Ω–≥–∞',
      '–≤–∑—è—Ç—å –≥–∏–¥—Ä–æ—Ü–∏–∫–ª –≤ –∞—Ä–µ–Ω–¥—É',
      '–¥–æ—Å–∫–∞ –¥–ª—è –≤–µ–π–∫–∞ –ø—Ä–æ–∫–∞—Ç',
      '–∞–∫–≤–∞–±–∞–π–∫ –æ–±—É—á–µ–Ω–∏–µ',
      '–≥–∏–¥—Ä–æ—Ü–∏–∫–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º',
      '–∞—Ä–µ–Ω–¥–∞ –≤–µ–π–∫ –ø–∞—Ä–∫–∞',
      '–¥–æ—Å–∫–∞ –≤–µ–π–∫–±–æ—Ä–¥ –∞—Ä–µ–Ω–¥–∞',
      '–≥–∏–¥—Ä–æ—Ü–∏–∫–ª —ç–∫—Å–∫—É—Ä—Å–∏—è',
      '–ø—Ä–æ–∫–∞—Ç –≤–µ–π–∫–±–æ—Ä–¥–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ',
      '–≤–æ–¥–Ω—ã–π —Å–ø–æ—Ä—Ç —Å –º–æ—Ç–æ—Ä–æ–º',
      '—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–æ–¥–Ω—ã–µ —Ç—É—Ä—ã',
      '–≤–æ–¥–Ω–æ–µ —Å–∞—Ñ–∞—Ä–∏ –Ω–∞ –≥–∏–¥—Ä–æ—Ü–∏–∫–ª–∞—Ö',
      '–∫–∞—Ç–∞–Ω–∏–µ –Ω–∞ –≤–µ–π–∫–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º'

    ],
    subcategories: ['water_skiing', 'wakeboarding', 'aquabike', 'parasailing'],
    emoji: 'üõ•Ô∏è',
    qualityFilters: {
      required: ['–≤–µ–π–∫', '–∞–∫–≤–∞–±–∞–π–∫', '–≤–æ–¥–Ω—ã–µ –ª—ã–∂–∏', '–ø–∞—Ä–∞—Å–µ–π–ª', '–±–∞–∑–∞', '—Å—Ç–∞–Ω—Ü–∏—è', '—Ç—Ä–∞—Å—Å–∞', '–ø—Ä–æ–∫–∞—Ç', '–≤–µ–π–∫–±–æ—Ä–¥–∏–Ω–≥', '–≤–æ–¥–Ω—ã–µ –ª—ã–∂–∏', '–∞–∫–≤–∞–±–∞–π–∫', '–ø–∞—Ä–∞—Å–µ–π–ª–∏–Ω–≥', '–í–µ–π–∫-–∫–ª—É–±', '–ø—Ä–æ–∫–∞—Ç –≤–æ–¥–Ω—ã—Ö –ª—ã–∂', '–ø—Ä–æ–∫–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –Ω–∞ –≤–æ–¥–µ', '–≤–µ–π–∫–±–æ—Ä–¥', '–≤–µ–π–∫ –∑–∞ –∫–∞—Ç–µ—Ä–æ–º', '–≤–µ–π–∫—Å–µ—Ä—Ñ–∏–Ω–≥', '–≤–µ–π–∫—Å–µ—Ä—Ñ–∏–Ω–≥ –∑–∞ –∫–∞—Ç–µ—Ä–æ–º', '–≤–µ–π–∫–±–æ—Ä–¥–∏–Ω–≥ –∑–∞ –∫–∞—Ç–µ—Ä–æ–º', '–≤–µ–π–∫—Å—ë—Ä—Ñ', '–≤–µ–π–∫—Å–µ—Ä—Ñ', '–≤–µ–π–∫-–∫–ª—É–±', '—Å–µ—Ä—Ñ–∏–Ω–≥', '–∞—Ä–µ–Ω–¥–∞ –≥–∏–¥—Ä–æ—Ü–∏–∫–ª–∞', '–≥–∏–¥—Ä–æ—Ü–∏–∫–ª', '–∞–∫–≤–∞–±–∞–π–∫', '–≥–∏–¥—Ä–æ—Ü–∏–∫–ª—ã', '–≤–æ–¥–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–∞—Ä–µ–Ω–¥–∞ –∞–∫–≤–∞–±–∞–π–∫–∞', '–ø—Ä–æ–∫–∞—Ç –≥–∏–¥—Ä–æ—Ü–∏–∫–ª–æ–≤', '–∞—Ä–µ–Ω–¥–∞ –∫–∞—Ç–µ—Ä–∞', '–ø—Ä–æ–∫–∞—Ç –∫–∞—Ç–µ—Ä–∞', '–ø–∞—Ä–∞—Å–µ–π–ª–∏–Ω–≥'],
      recommended: ['–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω', '–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '–ø–∞—Ä–∫', '–∞—Ä–µ–Ω–¥–∞', '–ø—É–Ω–∫—Ç –ø—Ä–æ–∫–∞—Ç–∞', '–≤–æ–¥–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞', '–≤–æ–¥–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏', '–ª–æ–¥–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è', '–≤–æ–¥–Ω–∞—è –±–∞–∑–∞', '–ê—ç—Ä–æ–∫–ª—É–±', '–í–æ–¥–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–≤–µ–∑–¥–µ—Ö–æ–¥—ã', '–∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã', '–∞—ç—Ä–æ–∫–ª—É–±', '–ø–æ–ª–µ—Ç –Ω–∞ –ø–∞—Ä–∞—à—é—Ç–µ', '—è—Ö—Ç-–∫–ª—É–±', '–≤–æ–¥—ã–Ω–µ –ø—Ä–æ–≥—É–ª–∫–∏'],
    },
    examples: ['–í–µ–π–∫-–ø–∞—Ä–∫ –î–æ–Ω', '–ê–∫–≤–∞–±–∞–π–∫ –∫–ª—É–± –ì–µ–ª–µ–Ω–¥–∂–∏–∫']
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const port = process.env.PORT || 3000;
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT
});

const getOrganizationDetails = async (orgName) => {
  try {
    const response = await axios.get('https://search-maps.yandex.ru/v1/', {
      params: {
        text: orgName,
        lang: 'ru_RU',
        type: 'biz',
        apikey: TIME_API_KEY, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞–ø—Ä—è–º—É—é
        results: 1
      },
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'YourApp/1.0'
      },
      timeout: 5000
    });

    if (!response.data || !response.data.features) {
      console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –Ø–Ω–¥–µ–∫—Å–∞');
      return null;
    }

    const features = response.data.features;
    if (features.length > 0) {
      const companyMeta = features[0].properties.CompanyMetaData;
      const hours = companyMeta?.Hours?.Availabilities;
      const opening_hours = {
        mon: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        tue: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        wed: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        thu: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        fri: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        sat: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        sun: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
      };
      if (hours) {
        hours.forEach(entry => {
          if (entry.Days) {
            entry.Days.forEach(day => {
              const d = day.toLowerCase();
              if (entry.Intervals?.length > 0) {
                opening_hours[d] = `${entry.Intervals[0].from}-${entry.Intervals[0].to}`;
              } else {
                opening_hours[d] = '–í—ã—Ö–æ–¥–Ω–æ–π';
              }
            });
          }
        });
      }
      return opening_hours;
    }
    return null;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', err.response?.data || err.message);
    return null;
  }
};

const prepareSpotData = async (feature, sportType, config) => {
  try {
    const properties = feature.properties;
    const geometry = feature.geometry;
    const name = properties.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const rating = parseFloat(properties.CompanyMetaData?.Features?.rating || 4.0);
    const description = properties.description || '';
    const address = properties.CompanyMetaData?.address_details || {};

    const requiredMatches = config.qualityFilters.required.filter(term => name.toLowerCase().includes(term));
    const recommendedMatches = config.qualityFilters.recommended.filter(term => name.toLowerCase().includes(term));

    return {
  name,
  lat: parseFloat(geometry.coordinates[1]),
  lon: parseFloat(geometry.coordinates[0]),
  rating,
  address: {
    country: address.Components.find(c => c.kind === 'country')?.name || '1',
    region: address.Components.find(c => c.kind === 'province')?.name || '1',
    city: address.Components.find(c => c.kind === 'locality')?.name ||
          address.Components.find(c => c.kind === 'area')?.name ||
          address.Components.find(c => c.kind === 'province')?.name || '1',
    district: address.Components.find(c => c.kind === 'district')?.name || '1',
    full_address: description || '1'
  },
  categories: [sportType, ...config.subcategories],
  qualityScore: requiredMatches.length > 0 ? (recommendedMatches.length > 1 ? 2 : 1) : 1,
  opening_hours: await getOrganizationDetails(name) || {
    mon: '1', tue: '1', wed: '1', thu: '1', fri: '1', sat: '1', sun: '1'
  }
};
  } catch (error) {
    console.error('Geocoder error:', error.message);
    return null;
  }
};

// –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ì–µ–æ–∫–æ–¥–µ—Ä (—Ç–æ–ª—å–∫–æ –†–æ—Å—Å–∏—è)
const searchWithGeocoder = async (query, sportType) => {
  try {
    const config = SPORT_CATEGORIES[sportType];

    const response = await axios.get('https://search-maps.yandex.ru/v1/', {
      params: {
        text: query,
        type: 'biz',
        lang: 'ru_RU',
        results: 50,
        apikey: MAIN_API_KEY // –∏—Å–ø–æ–ª—å–∑—É–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á API
      },
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'WaterSportSearchBot/1.0'
      },
      timeout: 7000
    });

    const features = response.data.features;

    const spotPromises = features.map(async (feature) => {
      const properties = feature.properties;
      const geometry = feature.geometry;
      const name = properties.name || query;
      const description = properties.description || '';
      const lowerName = name.toLowerCase();
      const lowerDesc = description.toLowerCase();

      const BLACKLIST = [
        '–ø—Ä—É–¥', '—Ä–µ–∫–∞', '–æ–∑–µ—Ä–æ', '–ø–µ—Ä–µ–≤–∞–ª', '—É—Ä–æ—á–∏—â–µ', '–∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å',
        '—É–ª–∏—Ü–∞', '—Å–µ–ª–æ', '–ø–æ—Å–µ–ª–æ–∫', '–≥–∞—Ä–∞–∂–∏', '—Ñ–µ—Ä–º–∞', '–¥–Ω–ø', '–≥–∞—Ä–∞–∂–Ω—ã–π –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤'
      ];

      const WHITELIST = [
        '—è—Ö—Ç', '–ø–∞—Ä—É—Å', '—Å–∞–ø', '–∫–∞—Ç–µ—Ä', '—Ä–∞—Ñ—Ç', '–≥—Ä–µ–±–Ω–∞—è –±–∞–∑–∞', '–∫–ª—É–±', '–ª–æ–¥–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è',
        '—Å—Ç–∞–Ω—Ü–∏—è', '–ø—Ä–æ–∫–∞—Ç', '–∞—Ä–µ–Ω–¥–∞', '–∞–∫–≤–∞–±–∞–π–∫', '–≤–µ–π–∫', '–≤–æ–¥–Ω—ã–µ –ª—ã–∂–∏', '–º–æ—Ç–æ—Å–ø–æ—Ä—Ç'
      ];

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      if (BLACKLIST.some(term => lowerName.includes(term) || lowerDesc.includes(term))) {
        return null;
      }

      if (!WHITELIST.some(term => lowerName.includes(term) || lowerDesc.includes(term))) {
        return null;
      }

      const requiredMatches = config.qualityFilters.required.filter(term =>
        lowerName.includes(term) || lowerDesc.includes(term)
      );

      const recommendedMatches = config.qualityFilters.recommended.filter(term =>
        lowerName.includes(term) || lowerDesc.includes(term)
      );

      const passesSoftFilter = requiredMatches.length > 0 ||
        recommendedMatches.length >= 2 ||
        lowerName.length >= 10;

      if (!passesSoftFilter) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: ${name}`);
        return null;
      }

      const address = properties.CompanyMetaData?.address_details || {};
      const rating = parseFloat(properties.CompanyMetaData?.Features?.rating || 4.0);
      const opening_hours = await getOrganizationDetails(name);

      return {
        name,
        lat: parseFloat(geometry.coordinates[1]),
        lon: parseFloat(geometry.coordinates[0]),
        rating,
        address: {
          country: address.Components?.find(c => c.kind === 'country')?.name || '1',
          region: address.Components?.find(c => c.kind === 'province')?.name || '1',
          city: address.Components?.find(c => c.kind === 'locality')?.name ||
                address.Components?.find(c => c.kind === 'area')?.name ||
                address.Components?.find(c => c.kind === 'province')?.name || '1',
          district: address.Components?.find(c => c.kind === 'district')?.name || '1',
          full_address: properties.description || '1'
        },
        categories: [sportType, ...config.subcategories],
        qualityScore: requiredMatches.length > 0 ? (recommendedMatches.length > 1 ? 2 : 1) : 1,
        opening_hours: opening_hours || {
          mon: '1', tue: '1', wed: '1', thu: '1', fri: '1', sat: '1', sun: '1'
        }
      };
    });

    const spots = (await Promise.all(spotPromises))
      .filter(s => s !== null)
      .sort((a, b) => b.qualityScore - a.qualityScore);

    console.log(`üîé –ù–∞–π–¥–µ–Ω–æ ${spots.length} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è "${query}" —á–µ—Ä–µ–∑ Search API`);
    return spots;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º:', error.message);
    return [];
  }
};


//–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–æ—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const saveSpots = async (spots) => {
  const client = await pool.connect();
    
  // –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
    const HARD_BLACKLIST = [
      '–ö–ª—É–±'
    ];
    
    const SOFT_BLACKLIST = [
      '—Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è —Ä—ã–±—ã', '–≥–∞—ç—Å', '–ø—Ä—É–¥', '—Ä–µ–∫–∞', '–æ–∑–µ—Ä–æ', '–æ—Ç—Å—Ç–æ–π–Ω–∏–∫',
      '—Ç–µ—Ö–Ω–∏—á', '–≤–æ–¥–æ—ë–º', '—Ñ–µ—Ä–º–∞', '–ø–µ—Ä–µ–≤–∞–ª', '—É—â–µ–ª—å–µ', '—Ö—Ä–µ–±–µ—Ç',
      '—Ä–∞–π–æ–Ω', '—É—Ä–æ—á–∏—â–µ', '–æ—Å—Ç—Ä–æ–≤', '–∫–≤–∞—Ä—Ç–∞–ª', '–º–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
      '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–±–∞—Å—Å–µ–∏–Ω —Ñ–µ—Ä', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '—à–∫–æ–ª–∞', '–≥–∏–¥—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è',
      '—Ü–µ–Ω—Ç—Ä', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è', '–ø–æ—Å–µ–ª–æ–∫', '–≥–æ—Ä–∞', '–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞', '–æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç', '–¥–∞—á–Ω–æ–µ –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ',
      '–ø—Ä–æ—Å–ø–µ–∫—Ç –∫–ª—É–±', '–∑–∞–≥–æ—Ä–æ–¥–Ω—ã–π –∫–ª—É–±', '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±', '–ø–º—Å', '–¥–Ω–ø', '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è',
      '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±', '–∑–∞–≥–æ—Ä–æ–¥–Ω—ã–π', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è'
    ];
  
    const WHITELIST = [
      '—Å—Ç–∞–Ω—Ü–∏—è', '–±–∞–∑–∞', '–∫–ª—É–±', '—è—Ö—Ç', '–ª–æ–¥–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è', '–ø–∞—Ä—É—Å', '—Å–∞–ø',
      '–≤–∏–Ω–¥—Å–µ—Ä—Ñ', '–≤–∏–Ω–¥', '–≥—Ä–µ–±–Ω–∞—è –±–∞–∑–∞', '—Ü–µ–Ω—Ç—Ä –ø–ª–∞–≤–∞–Ω–∏—è', '—à–∫–æ–ª–∞ –ø–ª–∞–≤–∞–Ω–∏—è',
      '–∞–∫–≤–∞–±–∞–π–∫', '–≤–µ–π–∫', '–≤–æ–¥–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å', '—Å–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å', '–∞—Ä–µ–Ω–¥–∞ —è—Ö—Ç',
      '–∫–∞—Ç–µ—Ä–∞', '–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '—Ñ–ª–æ—Ç–∏–ª–∏—è', '–ø—Ä–∏—á–∞–ª', '–ø—Ä–æ–∫–∞—Ç', '–ª–∞–≥–µ—Ä—å', '–æ–±—É—á–µ–Ω–∏–µ',
      '—è—Ö—Ç–µ–Ω–Ω–∞—è —à–∫–æ–ª–∞', '—Å–∞–ø-–∫–ª—É–±', '–≥—Ä–µ–±–Ω–æ–π –∫–ª—É–±', '–ø—Ä–æ–∫–∞—Ç —Å–∞–ø–æ–≤', '—Å—Ç–∞–Ω—Ü–∏—è —Å–∞–ø—Å–µ—Ä—Ñ–∏–Ω–≥–∞',
      '—è—Ö—Ç-—Ü–µ–Ω—Ç—Ä', '—Ñ–∏—Ç–Ω–µ—Å-–±–∞—Å—Å–µ–π–Ω', '—Å–µ—Ä—Ñ-–∫–ª—É–±', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞', '–≤–æ–¥–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä', '—è—Ö—Ç–µ–Ω–Ω—ã–π –∫–ª—É–±'
    ];

    const WATER_TERMS = [
      '–≤–æ–¥–Ω', '—è—Ö—Ç', '–ø–∞—Ä—É—Å', '–∫–∞—Ç–µ—Ä', '–ª–æ–¥–∫', '–≥—Ä–µ–±', '–±–∞–π–¥–∞—Ä', '–∫–∞—è–∫', 
      '—Å–∞–ø', '—Ä–∞—Ñ—Ç', '—Å–µ—Ä—Ñ', '–∞–∫–≤–∞', '–ø–ª–∞–≤', '–º–æ—Ä–µ', '—Ä–µ—á–Ω', '–æ–∑–µ—Ä',
      '–≥–∏–¥—Ä–æ', '–≤–µ–π–∫', '—Å–Ω–æ—Ä–∫–ª', '–¥–∞–π–≤', '—Ä—ã–±', '–≤–æ–¥–æ', '–ø—Ä–∏—á–∞–ª', '–º–∞—Ä–∏–Ω'
    ];
  
    try {
      await client.query('BEGIN');
  
      for (const spot of spots) {
        const spotName = spot.name;
        const lowerSpotName = spotName.toLowerCase();
  
        // 1. –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        if (HARD_BLACKLIST.includes(spotName)) {
          console.log(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º): ${spotName}`);
          continue;
        }
  
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø—Ä–æ—Å—Ç–æ –ö–ª—É–±" (–æ–¥–Ω–æ —Å–ª–æ–≤–æ)
        if (spotName.trim() === '–ö–ª—É–±') {
          console.log(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—Ä–æ—Å—Ç–æ "–ö–ª—É–±"): ${spotName}`);
          continue;
        }
  
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        const isSoftBlacklisted = SOFT_BLACKLIST.some(term => 
          lowerSpotName.includes(term.toLowerCase())
        );
        
        if (isSoftBlacklisted) {
          console.log(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º): ${spotName}`);
          continue;
        }
  
        // 4. –ù–æ–≤–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —è—Ö—Ç-–∫–ª—É–±–æ–≤
        const isYachtClub = /—è—Ö—Ç[-\s]?–∫–ª—É–±/i.test(spotName);
      
        if (isYachtClub) {
          // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —è—Ö—Ç-–∫–ª—É–±–æ–≤
          console.log(`‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω —è—Ö—Ç-–∫–ª—É–±: ${spotName}`);
        } 
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª—É–±–æ–≤ (–¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–æ–¥–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã)
        else if (/–∫–ª—É–±/i.test(spotName)) {
        const hasWaterTerms = WATER_TERMS.some(term => 
          lowerSpotName.includes(term.toLowerCase())
        );
        
        if (!hasWaterTerms) {
          console.log(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∫–ª—É–± –±–µ–∑ –≤–æ–¥–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤): ${spotName}`);
          continue;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
      const existing = await client.query(
        `SELECT id FROM spots 
         WHERE (name = $1 OR (lat BETWEEN $2-0.01 AND $2+0.01 
         AND lon BETWEEN $3-0.01 AND $3+0.01))
         LIMIT 1`,
        [spot.name, spot.lat, spot.lon]
      );

      if (existing.rows.length > 0) {
        console.log(`‚ôª –î—É–±–ª–∏–∫–∞—Ç: ${spot.name}`);
        continue;
      }

      // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
      const res = await client.query(
        `INSERT INTO spots (name, lat, lon, rating, quality_score, created_at)
         VALUES ($1, $2, $3, $4, $5, NOW())
         RETURNING id`,
        [spot.name, spot.lat, spot.lon, spot.rating, spot.qualityScore]
      );

      // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
      const spotId = res.rows[0].id;

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
      await client.query(
        `INSERT INTO spot_address 
         (spot_id, country, region, city, district, full_address)
         VALUES ($1, $2, $3, $4, $5, $6)`,
        [
          spotId,
          spot.address.country,
          spot.address.region,
          spot.address.city,
          spot.address.district,
          spot.address.full_address
        ]
      );

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      for (const category of _.uniq(spot.categories)) {
        await client.query(
          `INSERT INTO spot_categories (spot_id, category) VALUES ($1, $2)`,
          [spotId, category]
        );
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      if (spot.opening_hours) {
        for (const [day, label] of Object.entries(spot.opening_hours)) {
          await client.query(
            `INSERT INTO spot_schedule (spot_id, weekday, time_label)
             VALUES ($1, $2, $3)`,
            [spotId, day, label]
          );
        }
      }
    }

    await client.query('COMMIT');
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('DB error:', err.message);
    throw err;
  } finally {
    client.release();
  }
};
  
// –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const refreshAllSports = async () => {
  try {
    console.log('üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤...');
    
    for (const [sportType, config] of Object.entries(SPORT_CATEGORIES)) {
      console.log(`\nüîç –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –º–µ—Å—Ç –¥–ª—è: ${sportType} (${config.emoji})`);
      
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏–º–µ—Ä–∞–º
      for (const example of config.examples) {
        const spots = await searchWithGeocoder(example, sportType);
        if (spots.length) {
          await saveSpots(spots);
          console.log(`‚≠ê –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–º–∏—É–º: ${spots.length} –¥–ª—è "${example}"`);
        }
      }
      
      // –ó–∞—Ç–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫
      for (const query of config.searchTerms) {
        const spots = await searchWithGeocoder(query, sportType);
        if (spots.length) {
          await saveSpots(spots);
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${spots.length} –¥–ª—è "${query}"`);
        }
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫
      }
    }
    
    console.log('\nüéâ –í—Å–µ —Å–ø–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–æ—Ç–æ–≤:', err);
  }
};

// API Endpoints
app.get('/spots/all', async (req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT 
        s.id, s.name, s.lat, s.lon,
        TO_CHAR(s.created_at, 'DD.MM.YYYY HH24:MI') AS created_at,
        COALESCE(sa.country, '1') AS country,
        COALESCE(sa.region, '1') AS region,
        COALESCE(sa.city, '1') AS city,
        COALESCE(sa.district, '1') AS district,
        COALESCE(sa.street, '1') AS street,
        COALESCE(sa.full_address, '1') AS full_address,
        COALESCE(
          (SELECT JSONB_AGG(sc.category) 
           FROM spot_categories sc 
           WHERE sc.spot_id = s.id),
          '[]'::JSONB
        ) AS categories
      FROM spots s
      JOIN spot_address sa ON s.id = sa.spot_id
      ORDER BY s.created_at DESC
    `);
    
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get('/spots/by-region', async (req, res) => {
  try {
    const { region } = req.query;
    const { rows } = await pool.query(`
      SELECT 
        s.id, s.name, s.lat, s.lon,
        sa.city, sa.region,
        array_agg(sc.category) as categories
      FROM spots s
      JOIN spot_address sa ON s.id = sa.spot_id
      LEFT JOIN spot_categories sc ON s.id = sc.spot_id
      WHERE sa.region = $1
      GROUP BY s.id, sa.city, sa.region
    `, [region]);
    
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    await pool.query('SELECT 1');
    console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await refreshAllSports();
    
    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    schedule.scheduleJob('0 6 * * *', () => {
      console.log('\n‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
      refreshAllSports();
    });

    app.listen(port, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  }
};

startServer();